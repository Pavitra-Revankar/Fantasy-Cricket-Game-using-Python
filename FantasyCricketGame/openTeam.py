# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'openTeamGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtGui import QPixmap
from evaluteTeam2 import Ui_Form
import sqlite3

class Ui_openTeamWindow(object):
    def __init__(self):
        self.batCount = 4
        self.bowlCount = 3
        self.ARCount = 3
        self.WKCount = 1
        self.pointsAvailable = 1000
        self.pointsUsed = 0

    def msgbox(self,title,message,icon):
        msg= QMessageBox()
        msg.setStyleSheet("Font-size:15px; font-weight: bold;")
        msg.setWindowTitle(title)
        msg.setIconPixmap(QPixmap(icon).scaled(60,60))
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg.setText(message)
        msg.exec_()
        
    def databaseConn(self):
        conn = sqlite3.connect("C:\\Users\\gpavi\\Desktop\\FantasyCricketGame\\Database\\Fantasy Cricket.db")
        sqlcursor= conn.cursor()
        return sqlcursor
    
    def createTeam(self):
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        
    def evaluateTeam(self):
        #self.createTeam()
        self.form = QtWidgets.QWidget()
        self.ui = Ui_Form()
        self.ui.setupUi(self.form)
        self.form.show()
        


    def insert(self,teamName,list_item,value):
        conn = sqlite3.connect("C:\\Users\\gpavi\\Desktop\\FantasyCricketGame\\Database\\Fantasy Cricket.db")
        try:
            sqlC= conn.cursor()
            sqlC.execute("INSERT INTO Teams(Tname,Players,Value) VALUES(?,?,?);",(teamName,list_item,value,))
            conn.commit()    
        except:
            print("Error in operation")
            conn.rollback()
        conn.close()

    def saveTeam(self):
        sqlC = self.databaseConn()
        teamName = self.lineEdit_teamName.text()
        list_item=[]
        teamList = []
        sqlC.execute("SELECT Tname FROM Teams")
        allTeam = sqlC.fetchall()
        
        for i in range(self.listWidget_2.count()):
                list_item.append(self.listWidget_2.item(i).text())
                
        if self.lineEdit_teamName.text() == "":
            self.msgbox("WARNING","Team name can't be empty","Images of Fantasy Cricket\\warning.png")
        else:
            for i in allTeam:
                teamList.append(i[0])

            if teamName not in teamList:     
                if self.listWidget_2.count() == 11:
                    for i in range(len(list_item)):
                        sqlC.execute("SELECT Value FROM Stats WHERE Players = ?",(list_item[i],))
                        value = sqlC.fetchone()[0]
                
                        self.insert(teamName,list_item[i],value)
                    self.msgbox("TEAM SAVED","Hurray,your team is successfully created!","Images of Fantasy Cricket\\team2.jpg")
                    self.batCount = 0
                    self.bowlCount = 0
                    self.ARCount = 0
                    self.WKCount = 0
                    self.pointsAvailable = 1000
                    self.pointsUsed = 0

                    self.LE_batsman.setText(str(self.batCount))
                    self.LE_bowler.setText(str(self.bowlCount))
                    self.LE_allRounder.setText(str(self.WKCount))
                    self.LE_wicketKeeper.setText(str(self.ARCount))
                    self.LE_pointsAvailable.setText(str(self.pointsAvailable))
                    self.LE_pointsUsed.setText(str(self.pointsUsed))
                    self.LE_teamName.clear()
                    self.listWidget.clear()
                    self.listWidget_2.clear() 
                else:
                    self.msgbox("WARNING","A team must contain 11 players!","Images of Fantasy Cricket\\eleven.jpg")
            else:
                self.msgbox("WARNING","Team name already exists, try other name!","Images of Fantasy Cricket\\oops.jpg")

            
       
    def bat(self):
        if self.RB_bat.isChecked():
            self.listWidget.clear()
            cursor= self.databaseConn()
            cursor.execute('SELECT Players FROM Stats WHERE Ctg == "BAT"')
            batsmen = cursor.fetchall()
            for i in batsmen:
                self.listWidget.addItem(i[0])

    def bowl(self):
        if self.RB_bowl.isChecked():
            self.listWidget.clear()
            cursor= self.databaseConn()
            cursor.execute('SELECT Players FROM Stats WHERE Ctg == "BWL"')
            bowler = cursor.fetchall()
            for i in bowler:
                self.listWidget.addItem(i[0])

    def allRounder(self):
        if self.RB_allRounder.isChecked():
            self.listWidget.clear()
            cursor= self.databaseConn()
            cursor.execute('SELECT Players FROM Stats WHERE Ctg == "AR"')
            aRounder = cursor.fetchall()
            for i in aRounder:
                self.listWidget.addItem(i[0])
                
    def wicket(self):
        if self.RB_wicket.isChecked():
            self.listWidget.clear()
            cursor= self.databaseConn()
            cursor.execute('SELECT Players FROM Stats WHERE Ctg == "WK"')
            wKeeper = cursor.fetchall()
            for i in wKeeper:
                self.listWidget.addItem(i[0])

    def updatePointsIncrement(self,item):
        sqlC = self.databaseConn()
        p = item.text()
        sqlC.execute("SELECT Value FROM stats WHERE Players = ?",(p,))
        value = sqlC.fetchone()

        self.pointsAvailable = self.pointsAvailable - value[0]
        print(self.pointsAvailable)
        self.pointsUsed = self.pointsUsed + value[0]
        self.lineEdit_pointsAvailable.setText(str(self.pointsAvailable))   
        self.lineEdit_pointsUsed.setText(str(self.pointsUsed))

    def updatePointsdecrement(self,item):
        print(self.pointsAvailable)
        sqlC = self.databaseConn()
        p = item.text()
        sqlC.execute("SELECT Value FROM stats WHERE Players = ?",(p,))
        value = sqlC.fetchone()
            
        self.pointsAvailable = self.pointsAvailable + value[0]
        self.lineEdit_pointsAvailable.setText(str(self.pointsAvailable))
        self.pointsUsed = self.pointsUsed - value[0]        
        self.lineEdit_pointsUsed.setText(str(self.pointsUsed))
        
    def removeList1(self,item):
        sqlC = self.databaseConn()
        sqlC.execute("SELECT Value FROM stats WHERE Players = ?",(item.text(),))
        value = sqlC.fetchone()
        player = []
        if (self.RB_bat.isChecked()):
            if self.batCount < 4:
                if self.pointsAvailable > value[0]:
                    playerSelected = self.listWidget.takeItem(self.listWidget.row(item))
                    for i in range(self.listWidget_2.count()):
                        player.append(self.listWidget_2.item(i).text())

                    if playerSelected.text() in player:
                        print("same player")
                        self.msgbox("ERROR","Player already selected, choose other!","Images of Fantasy Cricket\\same.png")
                    else:
                        self.listWidget_2.addItem(playerSelected.text())
                        self.batCount = self.batCount + 1
                        self.lineEdit_bat_2.setText(str(self.batCount))
                        self.updatePointsIncrement(item)
                        
                else:
                    self.msgbox("ERROR","Have no enough points!","Images of Fantasy Cricket\\wallet.jpg")
            else:
                self.msgbox("ERROR","Team can have only 4 Batsmen","Images of Fantasy Cricket\\warning.png")

                
        elif(self.RB_bowl.isChecked()):
            if self.bowlCount < 3:
                if self.pointsAvailable > value[0]:
                    playerSelected = self.listWidget.takeItem(self.listWidget.row(item))
                    for i in range(self.listWidget_2.count()):
                        player.append(self.listWidget_2.item(i).text())
                    if playerSelected.text() in player:
                        self.msgbox("ERROR","Player already selected, choose other!","Images of Fantasy Cricket\\same.png")
                    else:
                        self.listWidget_2.addItem(item.text())
                        self.bowlCount = self.bowlCount + 1
                        self.lineEdit_bowl_2.setText(str(self.bowlCount))
                        self.updatePointsIncrement(item)
                else:
                    self.msgbox("ERROR","Have no enough points!","Images of Fantasy Cricket\\wallet.jpg")
            else:
                self.msgbox("ERROR","Team can have only 3 Bowler","Images of Fantasy Cricket\\warning.png")
                
        elif(self.RB_allRounder.isChecked()):
            if self.ARCount < 3:
                if self.pointsAvailable > value[0]:
                    playerSelected = self.listWidget.takeItem(self.listWidget.row(item))
                    for i in range(self.listWidget_2.count()):
                        player.append(self.listWidget_2.item(i).text())
                    if playerSelected.text() in player:
                        self.msgbox("ERROR","Player already selected, choose other!","Images of Fantasy Cricket\\same.png")
                    else:
                        self.listWidget_2.addItem(item.text())
                        self.ARCount = self.ARCount + 1
                        self.lineEdit_allRounder_2.setText(str(self.ARCount))
                        self.updatePointsIncrement(item)
                else:
                    self.msgbox("ERROR","Have no enough points!","Images of Fantasy Cricket\\wallet.jpg")
            else:
                self.msgbox("ERROR","Team can have only 3 All-Rounder","Images of Fantasy Cricket\\warning.png")
                
        elif(self.RB_wicket.isChecked()):
            if self.pointsAvailable > value[0]:
                    if self.WKCount != 1 or self.WKCount<1:
                        playerSelected = self.listWidget.takeItem(self.listWidget.row(item))
                        for i in range(self.listWidget_2.count()):
                            player.append(self.listWidget_2.item(i).text())
                        if playerSelected.text() in player:
                            self.msgbox("ERROR","Player already selected, choose other!","Images of Fantasy Cricket\\same.png")
                        else:
                            self.listWidget_2.addItem(item.text())
                            self.WKCount = self.WKCount + 1
                            self.lineEdit_wicket_2.setText(str(self.WKCount))
                            self.updatePointsIncrement(item)
                    else:
                        self.msgbox("ERROR","Have no enough points!","Images of Fantasy Cricket\\wallet.jpg")
                
            else:
                self.msgbox("ERROR","Team can have only 1 wicket-keeper","Images of Fantasy Cricket\\warning.png")
                    


    def removeList2(self,item):
        player_L1 = []
        ply = item.text()
        sqlC = self.databaseConn()
        sqlC.execute("SELECT Ctg FROM Stats WHERE Players = ?",(ply,))
        ctg = sqlC.fetchall()
        print(ctg[0][0])
               
        if ctg[0][0] == 'BAT' and self.batCount > 0:
            self.RB_bat.setChecked(True)
            player_L2 = self.listWidget_2.takeItem(self.listWidget_2.row(item))

            for i in range(self.listWidget.count()):
                player_L1.append(self.listWidget.item(i).text())
            if player_L2.text() in player_L1:
                pass
            else:
                self.listWidget.addItem(player_L2.text())
                
            self.batCount = self.batCount - 1
            self.lineEdit_bat_2.setText(str(self.batCount))
            self.updatePointsdecrement(item)
            
        if ctg[0][0] == 'BWL' and self.bowlCount > 0:
            self.RB_bowl.setChecked(True)
            player_L2 = self.listWidget_2.takeItem(self.listWidget_2.row(item))
        
            for i in range(self.listWidget.count()):
                player_L1.append(self.listWidget.item(i).text())
            if player_L2.text() in player_L1:
                pass
            else:
                self.listWidget.addItem(player_L2.text())
                
            self.bowlCount = self.bowlCount - 1
            print(self.bowlCount)
            self.lineEdit_bowl_2.setText(str(self.bowlCount))
            self.updatePointsdecrement(item)
            
        if ctg[0][0] == 'AR' and self.ARCount > 0:
            self.RB_allRounder.setChecked(True)
            player_L2 = self.listWidget_2.takeItem(self.listWidget_2.row(item))
        
            for i in range(self.listWidget.count()):
                player_L1.append(self.listWidget.item(i).text())
            if player_L2.text() in player_L1:
                pass
            else:
                self.listWidget.addItem(player_L2.text())

            self.ARCount = self.ARCount - 1
            self.lineEdit_allRounder_2.setText(str(self.ARCount))
            self.updatePointsdecrement(item)
            
        if ctg[0][0] == 'WK' and self.WKCount > 0:
            self.RB_wicket.setChecked(True)
            player_L2 = self.listWidget_2.takeItem(self.listWidget_2.row(item))
        
            for i in range(self.listWidget.count()):
                player_L1.append(self.listWidget.item(i).text())
            if player_L2.text() in player_L1:
                pass
            else:
                self.listWidget.addItem(player_L2.text())
                
            self.WKCount = self.WKCount - 1
            self.lineEdit_wicket_2.setText(str(self.WKCount))
            self.updatePointsdecrement(item)                

    def list2(self):
        playerList = []
        valueList = []
        team = self.lineEdit_teamName.text()

        sqlC = self.databaseConn()
        sqlC.execute("SELECT Players FROM Teams WHERE Tname = ?",(team,))
        players = sqlC.fetchall()
        
        for i in players:
            self.listWidget_2.addItem(i[0])
            playerList.append(i[0])
        for i in playerList:
            sqlC.execute("SELECT Value FROM Stats WHERE Players = ?",(i,))
            value = sqlC.fetchall()
            valueList.append(value[0][0])
        for i in valueList:
            self.pointsUsed += i
        self.pointsAvailable = self.pointsAvailable - self.pointsUsed   
        self.lineEdit_pointsUsed.setText(str(self.pointsUsed))
        self.lineEdit_pointsAvailable.setText(str(self.pointsAvailable))
        self.lineEdit_bat_2.setText(str(self.batCount))
        self.lineEdit_bowl_2.setText(str(self.bowlCount))
        self.lineEdit_allRounder_2.setText(str(self.ARCount))
        self.lineEdit_wicket_2.setText(str(self.WKCount))

    def setupUi(self, openTeamWindow):
        openTeamWindow.setObjectName("openTeamWindow")
        openTeamWindow.resize(700, 695)
        openTeamWindow.setMaximumSize(QtCore.QSize(1000, 1000))
        self.centralwidget = QtWidgets.QWidget(openTeamWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_2.setContentsMargins(2, 2, 2, 2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Label.setFont(font)
        self.Label.setObjectName("Label")
        self.verticalLayout_2.addWidget(self.Label)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.Label_bat = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Label_bat.setFont(font)
        self.Label_bat.setObjectName("Label_bat")
        self.horizontalLayout_2.addWidget(self.Label_bat)
        self.lineEdit_bat_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_bat_2.setEnabled(False)
        self.lineEdit_bat_2.setStyleSheet("background-color:white; font: bold 10pt Comic Sans MS")
        self.lineEdit_bat_2.setObjectName("lineEdit_bat_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_bat_2)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.label_bowl = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_bowl.setFont(font)
        self.label_bowl.setObjectName("label_bowl")
        self.horizontalLayout_2.addWidget(self.label_bowl)
        
        self.lineEdit_bowl_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_bowl_2.setEnabled(False)
        self.lineEdit_bowl_2.setStyleSheet("background-color:white; font: bold 10pt Comic Sans MS")
        self.horizontalLayout_2.addWidget(self.lineEdit_bowl_2)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.Label_allRounder = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Label_allRounder.setFont(font)
        self.Label_allRounder.setObjectName("Label_allRounder")
        self.horizontalLayout_2.addWidget(self.Label_allRounder)
        
        self.lineEdit_allRounder_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_allRounder_2.setEnabled(False)
        self.lineEdit_allRounder_2.setStyleSheet("background-color:white; font: bold 10pt Comic Sans MS")
        self.lineEdit_allRounder_2.setObjectName("lineEdit_allRounder_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_allRounder_2)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.Label_wicket = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Label_wicket.setFont(font)
        self.Label_wicket.setObjectName("Label_wicket")
        self.horizontalLayout_2.addWidget(self.Label_wicket)
        
        self.lineEdit_wicket_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_wicket_2.setEnabled(False)
        self.lineEdit_wicket_2.setStyleSheet("background-color:white; font: bold 10pt Comic Sans MS")
        self.lineEdit_wicket_2.setObjectName("lineEdit_wicket_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_wicket_2)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        spacerItem3 = QtWidgets.QSpacerItem(18, 13, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_2.addItem(spacerItem3)
        self.verticalLayout_7.addLayout(self.verticalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.Label_pointsAvailable = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Label_pointsAvailable.setFont(font)
        self.Label_pointsAvailable.setObjectName("Label_pointsAvailable")
        self.horizontalLayout_3.addWidget(self.Label_pointsAvailable)
        self.lineEdit_pointsAvailable = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_pointsAvailable.setEnabled(False)
        self.lineEdit_pointsAvailable.setStyleSheet("background-color:white; font: bold 10pt Comic Sans MS")
        self.lineEdit_pointsAvailable.setObjectName("lineEdit_pointsAvailable")
        self.horizontalLayout_3.addWidget(self.lineEdit_pointsAvailable)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.Label_pointsUsed = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Label_pointsUsed.setFont(font)
        self.Label_pointsUsed.setObjectName("Label_pointsUsed")
        self.horizontalLayout_3.addWidget(self.Label_pointsUsed)
        self.lineEdit_pointsUsed = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_pointsUsed.setEnabled(False)
        self.lineEdit_pointsUsed.setStyleSheet("background-color:white; font: bold 10pt Comic Sans MS")
        self.lineEdit_pointsUsed.setObjectName("lineEdit_pointsUsed")
        self.horizontalLayout_3.addWidget(self.lineEdit_pointsUsed)
        self.verticalLayout_7.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.RB_bat = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.RB_bat.setFont(font)
        self.RB_bat.setObjectName("RB_bat")
        self.RB_bat.toggled.connect(self.bat)
        self.horizontalLayout_5.addWidget(self.RB_bat)
        self.RB_bowl = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.RB_bowl.setFont(font)
        self.RB_bowl.setObjectName("RB_bowl")
        self.RB_bowl.toggled.connect(self.bowl)
        self.horizontalLayout_5.addWidget(self.RB_bowl)
        self.RB_allRounder = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.RB_allRounder.setFont(font)
        self.RB_allRounder.setObjectName("RB_allRounder")
        self.RB_allRounder.toggled.connect(self.allRounder)
        self.horizontalLayout_5.addWidget(self.RB_allRounder)
        self.RB_wicket = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.RB_wicket.setFont(font)
        self.RB_wicket.setObjectName("RB_wicket")
        self.RB_wicket.toggled.connect(self.wicket)
        self.horizontalLayout_5.addWidget(self.RB_wicket)
        self.verticalLayout_3.addLayout(self.horizontalLayout_5)
        
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setObjectName("listWidget")
        self.listWidget.itemDoubleClicked.connect(self.removeList1)
        
        self.verticalLayout_3.addWidget(self.listWidget)
        self.horizontalLayout_4.addLayout(self.verticalLayout_3)
        spacerItem5 = QtWidgets.QSpacerItem(17, 378, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem5)
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_4.addWidget(self.label_9)
        spacerItem6 = QtWidgets.QSpacerItem(17, 378, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem6)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.Label_teamName = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Label_teamName.setFont(font)
        self.Label_teamName.setObjectName("Label_teamName")
        self.horizontalLayout_6.addWidget(self.Label_teamName)
        self.lineEdit_teamName = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_teamName.setObjectName("lineEdit_teamName")
        self.lineEdit_teamName.setStyleSheet("background-color:white; font: bold 10pt Comic Sans MS")
        self.horizontalLayout_6.addWidget(self.lineEdit_teamName)
        self.verticalLayout_4.addLayout(self.horizontalLayout_6)
        
        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_2.setObjectName("listWidget_2")
        self.listWidget_2.itemDoubleClicked.connect(self.removeList2)
        
        self.verticalLayout_4.addWidget(self.listWidget_2)
        self.horizontalLayout_4.addLayout(self.verticalLayout_4)
        self.verticalLayout_7.addLayout(self.horizontalLayout_4)
        spacerItem7 = QtWidgets.QSpacerItem(163, 13, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_7.addItem(spacerItem7)
        openTeamWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(openTeamWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 828, 21))
        self.menubar.setObjectName("menubar")
        self.menuManage_Team = QtWidgets.QMenu(self.menubar)
        self.menuManage_Team.setObjectName("menuManage_Team")
        openTeamWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(openTeamWindow)
        self.statusbar.setObjectName("statusbar")
        openTeamWindow.setStatusBar(self.statusbar)
        self.actionNEW_Team = QtWidgets.QAction(openTeamWindow)
        self.actionNEW_Team.setObjectName("actionNEW_Team")
        self.actionOPEN_Team = QtWidgets.QAction(openTeamWindow)
        self.actionOPEN_Team.setObjectName("actionOPEN_Team")
        self.actionSAVE_Team = QtWidgets.QAction(openTeamWindow)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        self.actionEVALUATE_Team = QtWidgets.QAction(openTeamWindow)
        self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
        self.menuManage_Team.addAction(self.actionNEW_Team)
        self.menuManage_Team.addAction(self.actionOPEN_Team)
        self.menuManage_Team.addAction(self.actionSAVE_Team)
        self.menuManage_Team.addAction(self.actionEVALUATE_Team)
        self.menubar.addAction(self.menuManage_Team.menuAction())

        self.actionNEW_Team.triggered.connect(self.createTeam)
        self.actionSAVE_Team.triggered.connect(self.saveTeam)
        self.actionEVALUATE_Team.triggered.connect(self.evaluateTeam)

        self.retranslateUi(openTeamWindow)
        QtCore.QMetaObject.connectSlotsByName(openTeamWindow)
        

    def retranslateUi(self, openTeamWindow):
        _translate = QtCore.QCoreApplication.translate
        openTeamWindow.setWindowTitle(_translate("openTeamWindow", "OPEN TEAM"))
        self.Label.setText(_translate("openTeamWindow", "Your Selection"))
        self.Label_bat.setText(_translate("openTeamWindow", "Batsman(BAT)"))
        self.label_bowl.setText(_translate("openTeamWindow", "Bowlers(BOW)"))
        self.Label_allRounder.setText(_translate("openTeamWindow", "Allrounders(AR)"))
        self.Label_wicket.setText(_translate("openTeamWindow", "Wicket-keeper(WR)"))
        self.Label_pointsAvailable.setText(_translate("openTeamWindow", "Points Available : "))
        self.Label_pointsUsed.setText(_translate("openTeamWindow", "Points Used : "))
        self.RB_bat.setText(_translate("openTeamWindow", "BAT"))
        self.RB_bowl.setText(_translate("openTeamWindow", "BOW"))
        self.RB_allRounder.setText(_translate("openTeamWindow", "AR"))
        self.RB_wicket.setText(_translate("openTeamWindow", "WK"))
        self.label_9.setText(_translate("openTeamWindow", " >"))
        self.Label_teamName.setText(_translate("openTeamWindow", "Team Name "))
        self.menuManage_Team.setTitle(_translate("openTeamWindow", "Manage Team"))
        self.actionNEW_Team.setText(_translate("openTeamWindow", "NEW Team"))
        self.actionOPEN_Team.setText(_translate("openTeamWindow", "OPEN  Team"))
        self.actionSAVE_Team.setText(_translate("openTeamWindow", "SAVE Team"))
        self.actionEVALUATE_Team.setText(_translate("openTeamWindow", "EVALUATE Team"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    openTeamWindow = QtWidgets.QMainWindow()
    ui = Ui_openTeamWindow()
    ui.setupUi(openTeamWindow)
    openTeamWindow.show()
    sys.exit(app.exec_())
